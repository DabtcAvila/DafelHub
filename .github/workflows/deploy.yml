name: 🚀 Deploy DafelHub to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run tests
      run: |
        python test_basic.py

    - name: 🔍 Lint code
      run: |
        pip install flake8 black isort mypy
        black --check src/
        isort --check-only src/
        flake8 src/
        mypy src/ --ignore-missing-imports

    - name: 📊 Generate API documentation
      run: |
        pip install mkdocs mkdocs-material mkdocstrings[python]
        mkdocs build
      
    - name: 🏗️ Build static site
      run: |
        # Create build directory
        mkdir -p _site
        
        # Copy main site files
        cp -r docs/* _site/
        
        # Copy additional assets
        mkdir -p _site/assets
        cp -r src/ _site/src/ || true
        
        # Generate JSON API documentation
        python -c "
import json
from pathlib import Path

# Generate API info
api_info = {
    'name': 'DafelHub API',
    'version': '0.1.0',
    'description': 'Enterprise SaaS Consulting Hub API',
    'endpoints': {
        'health': '/health',
        'auth': '/api/v1/auth',
        'projects': '/api/v1/projects',
        'specs': '/api/v1/specifications',
        'agents': '/api/v1/agents'
    },
    'features': [
        'Spec-Driven Development',
        'Multi-Agent AI Orchestration',
        'Enterprise Security (AES-256-GCM)',
        'Real-time Monitoring',
        'Automated Deployment'
    ]
}

Path('_site/api.json').write_text(json.dumps(api_info, indent=2))
print('✅ API documentation generated')
        "

    - name: 📄 Setup Pages
      uses: actions/configure-pages@v3
      
    - name: 📤 Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: '_site'

  # Deploy job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
      
    - name: 🎉 Deployment notification
      run: |
        echo "🎉 DafelHub successfully deployed!"
        echo "🌐 Live URL: ${{ steps.deployment.outputs.page_url }}"
        echo "📊 Build completed at: $(date)"

  # Health check job
  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: 🏥 Health check deployed site
      run: |
        echo "🔍 Running health checks on deployed site..."
        
        # Wait for deployment to propagate
        sleep 30
        
        # Check if site is accessible
        curl -f -s -o /dev/null ${{ needs.deploy.outputs.page_url }} || {
          echo "❌ Site is not accessible"
          exit 1
        }
        
        echo "✅ Site is accessible"
        
        # Check specific endpoints
        endpoints=(
          ""
          "docs/"
          "api.json"
        )
        
        for endpoint in "${endpoints[@]}"; do
          url="${{ needs.deploy.outputs.page_url }}${endpoint}"
          if curl -f -s -o /dev/null "$url"; then
            echo "✅ $url is accessible"
          else
            echo "⚠️  $url returned an error"
          fi
        done
        
        echo "🎯 Health check completed"

  # Performance test job
  performance:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📊 Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          ${{ needs.deploy.outputs.page_url }}
        configPath: '.github/workflows/lighthouserc.js'
        uploadArtifacts: true
        temporaryPublicStorage: true