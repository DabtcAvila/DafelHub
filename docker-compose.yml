version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: dafelhub-postgres
    environment:
      POSTGRES_DB: dafelhub
      POSTGRES_USER: dafelhub_user
      POSTGRES_PASSWORD: dafelhub_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - dafelhub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dafelhub_user -d dafelhub"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dafelhub-redis
    command: redis-server --appendonly yes --requirepass dafelhub_redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dafelhub-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DafelHub API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dafelhub-api
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://dafelhub_user:dafelhub_pass@postgres:5432/dafelhub
      - REDIS_URL=redis://:dafelhub_redis_pass@redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-chars
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - dafelhub_uploads:/app/uploads
      - dafelhub_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dafelhub-network
    command: uvicorn dafelhub.api.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker (Background tasks)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dafelhub-worker
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://dafelhub_user:dafelhub_pass@postgres:5432/dafelhub
      - REDIS_URL=redis://:dafelhub_redis_pass@redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-chars
    volumes:
      - .:/app
      - dafelhub_uploads:/app/uploads
      - dafelhub_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dafelhub-network
    command: celery -A dafelhub.core.celery worker --loglevel=info

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: dafelhub-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - dafelhub-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: dafelhub-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - dafelhub-network

networks:
  dafelhub-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  dafelhub_uploads:
    driver: local
  dafelhub_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local